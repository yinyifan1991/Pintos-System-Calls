             +----------------------------------------------+
                             | CSE 521                                           |
             | PROJECT 2: USER PROGRAMS  |
             | DESIGN DOCUMENT                    |
             +---------------------------------------------+


---- GROUP ----


>> Fill in the names and email addresses of your group members.


Shengyung Cheng <shengyun@buffalo.edu>
Yifan Yin <yifanyin@buffalo.edu>
Jun Zhuang <Junzhuan@buffalo.edu>


---- PRELIMINARIES ----


>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.


>> Describe briefly which parts of the assignment were implemented by
>> each member of your team. If some team members contributed significantly
>> more or less than others (e.g. 2x), indicate that here.


Shengyung Cheng: mainly in synchronization and system call
Yifan Yin: mainly in argument passing and memory access
Jun Zhuang: mainly in system call and denying writes to executable


>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.


               ARGUMENT PASSING
               ================


---- DATA STRUCTURES ----


>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


char *argv[CMD_LENGTH_MAX];   \\reserve space for segmented commands
Int argc;    \\ indicate the number of segmented commands


---- ALGORITHMS ----


>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?


Most crucial step in argument parsing is to setup the stack. Since process_execute() provides file name, which includes arguments string, we decide to separate the token. In start_process(), we decide separate the parameter again and put it into the stack. We pass the arguments string to start_process(), load() and setup_stack(). Load() places all arguments in appropriate order.


We scan the arguments backwards so that we can make sure the first token is the last argument and vise versa. Our algorithm keep pointer in decreasing order to setup the elements of argv[ ] to be in the right order. 


To avoid overflowing the stack page, our team prefer to check the total size of args which are being passed rather than check the pointer every time before using it. We decide to handle it in page fault exception when it fails. If it overflow the stack, it exits. We choose this approach since it does not have too much burden and will terminate the process while facing too much arguments.




---- RATIONALE ----


>> A3: Why does Pintos implement strtok_r() but not strtok()?


The caller provides save pointer in strtok_r() rather than in strtok(). So, strtok_r() can avoid another thread gaining control and then calling strtok(). This strtok() can change the save pointer when it was called. All in all, strtok_r() can make us avoid that situation.




>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.


First, Separating the executable name and arguments can lower the burden of kernel. Kernel does not have to deal with executable name. Separation can shorten the executed time in kernel and make it more efficient.


Further, it is more safe to check the input in shell rather than in kernel. If a long text is input, it might cause a problem in kernel and, even worse, will make it crash. Thus, separation can also make it robust.




                 SYSTEM CALLS
                 ============


---- DATA STRUCTURES ----


>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.



These are new in thread.h


struct thread
{
#ifdef USERPROG
    int sys_status;
    struct list children;
    struct list file_list;
    struct thread *parent;
    struct semaphore sema_wait;
    bool wait;
    bool exit;
    int fd;
#endif

}

This is in syscall.c

struct process_file
{
     struct file *file;
     int fd;
     struct list_elem elem;
};


>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?


In our design, file descriptors has solo mapping to the open files. The file descriptors are unique in the entire OS. Our team prefer to maintain a lost inside kernel since file access will go through kernel.


---- ALGORITHMS ----


>> B3: Describe your code for reading and writing user data from the
>> kernel.


To reading system call, check the valid pointer in buffer first, exit if not valid. After that, check if it is in STDOUT_FILENO, release lock and return -1 if yes. On the other hand, if it is in STDIN_FILENO, retrieve keys from standard input and then release the lock and return 0. Otherwise, find the file in open_file list and use read system call to read the file. Then release the lock and return.


Writing system call is similar to the read. After confirming the buffer pointer is valid, judge the status, whether STDOUT or STDIN. This step is similar to the read. Otherwise, find open file and use write system call to write buffer to the file and get status.




>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?


The least number of inspections could be called is 1, if pagedir_get_page() is not used for pointer validation. All the data is stored in a single page.
The greatest number of inspections could be called is 4096, if pagedir_get_page() is not used for pointer validation, and all the data is separated in every single page of all 4096 pages.
For the situation that a system call that only copies 2 bytes of data, the least number of inspections is 1, just like above If we get back a kernel address which has more than 2 bytes space.
The greatest number of inspections is 2, if we get back a kernel address that only 1 byte far from the end of the page.
We don’t see any room for improvement.


>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.


We implement the “wait” system call in terms of the function process_wait().
We ensure that the given tid is one of the children of this process by traversing the list “children”. If it is in this list, remove the child from the “children” list of the thread  and wait for it to die. If this tid is not the child of this thread, return false.
We have an enumeration status to indicate the status of children so that it’s able to signal when a process should wait or terminate.


>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.


To avoid invalid address pointer, we revoke function pagedir_get_page() and check the return value is not null. It makes sure that we can have a free page and valid address. Then we assert that the pointer we access references to the user virtual address by using is_user_vaddr(), which assure that the address is less than PHYS_BASE.
For example, we revoke “write” function and its esp pointer and arguments will be checked by is_valid_pointer() and pagedir_get_page(). If its invalid, process will be terminate. If it enters the write function, the pointer of the buffer and buffer+size needs to be checked too.




---- SYNCHRONIZATION ----


>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

In order to avoid parent process return without new executable has completed, we plan to add a semaphore. Whenever parent process create a child by calling process_execute(), it semadown itself. If the start_process() complete loading, child process sema_up to awake parent and simultaneously sema_down itself to let parent store the child’s state.
Add a semaphore in parent process that is used to wait success. If success, return pit,-1 otherwise.
We haven't finish it yet.
 
>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?
We plan to add variable child_info in parent to determine whether child is exist.
(1)  Call before c exit
If child is not exit, parent wait until child exit. Once child is exit, it signals parent, parent remove the child_info in the children list at the same time and return child’s exit status.
(2)  Call after c exit
Parent check the child_info and find the child is exit. Then parent will remove C’s child_info and return c’s exit status.
If P terminates without waiting before C exit, C’s pointer to parent will be NULL. P’s child list will be free.
If P terminates without waiting after c exit, P frees its data.
We haven't finished it yet


---- RATIONALE ----


>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?


It’s how we learned to access user memory at first and we think it’s the easiest way to understand the mechanism.


>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?


Advantages:
1.It can store necessary file information and be used efficiently
2.It makes kernel aware of all the open files
Disadvantages:
1.Consume kernel space, user program opening many files may result in crashing the kernel


>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?


We are not going to change it.
One advantage may be that a new tid_t includes more information. Some new method to calculate pid can be implement to the new mapping such as adding parent information to children’s pid.


               SURVEY QUESTIONS
               ================


Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.


>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

It’s hard because there’s really a lack of tutoring on this topic. In terms of that, it takes too long time on this project.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

Yes, this work lets us know more about how user programs work on OS and how to access a memory. 

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

We think we need more sample codes solving a similar problem and tutoring on code level.

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

We think it will be better if TAs present some recitation about pintos topic.

>> Any other comments?



